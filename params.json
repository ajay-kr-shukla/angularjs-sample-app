{"name":"Angularjs-sample-app","tagline":"AngularJS for Beginners Tutorial","body":"<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">\r\n<b><br /></b>\r\n<br />\r\n<div style=\"text-align: center;\">\r\n<b>AngularJS Tutorial For Beginners&nbsp;</b></div>\r\n<div style=\"text-align: center;\">\r\n<b><br /></b></div>\r\n<div style=\"text-align: center;\">\r\n<b><br /></b></div>\r\n<b>AngularJS &nbsp;</b>is an open-source web application framework, maintained by Google and community, that assists with creating single-page applications, one-page web applications that only require HTML, CSS, and JavaScript on the client side. Its goal is to augment web applications with model view controller (MVC) capability &nbsp;on the SPA (Single Page Application), in an effort to make both development and testing easier.<br />\r\n<br />\r\nA &nbsp;Single Page Application is one in which we have a shell page and we can load multiple<br />\r\nviews into that.So a traditional app, as you know you typically blink and load everything again. It’s not very efficient on the bandwidth, especially in the mobile world.<br />\r\nSo a traditional app, as you know you typically blink and load everything again. It’s not very efficient<br />\r\non the bandwidth, especially in the mobile world.<br />\r\n<br />\r\nAngularJS' two-way data binding is its most notable feature and reduces the amount of code written by relieving the server backend from templating responsibilities. Instead, templates are rendered in plain HTML according to data contained in a scope defined in the model.<br />\r\n<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">  </span>AngularJS Introduction<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">  </span>AngularJS Expressions<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">  </span>AngularJS Directives<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">  </span>AngularJS Modules<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">  </span>AngularJS Controllers<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">  </span>AngularJS Filters<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">  </span>AngularJS HttpRequest<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">  </span>AngularJS Forms/Models<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">  </span>AngularJS loops, show, hide, clicks, data binding, custyomised filter<br />\r\n&nbsp;Dependency Injection<br />\r\n&nbsp;Creating Dynamic Models in AngularJS<br />\r\n<br />\r\n<div>\r\n<br /></div>\r\n<br />\r\n<br />\r\n<div class=\"western\">\r\n<b>Angular JS code begins by including this file</b></div>\r\n<br />\r\n<div class=\"western\">\r\n&lt;script\r\nsrc=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js\"&gt;&lt;/script&gt;</div>\r\n<br />\r\n<br />\r\n<b>AngularJS Expressions</b><br />\r\nAngular expressions are JavaScript-like code snippets that are usually placed in bindings such as <b><i>{{ expression }}</i></b>. AngularJS expressions binds data to HTML the same way as the ng-bind directive.<br />\r\nAngular Expressions vs. JavaScript Expressions<br />\r\nAngular expressions are like JavaScript expressions with the following differences:<br />\r\n<br />\r\n<ul style=\"text-align: left;\">\r\n<li>Context: JavaScript expressions are evaluated against the global window. In Angular, expressions are evaluated against a scope object.</li>\r\n<li>Forgiving: In JavaScript, trying to evaluate undefined properties generates ReferenceError or TypeError. In Angular, expression evaluation is forgiving to undefined and null.</li>\r\n<li>No Control Flow Statements: you cannot use the following in an Angular expression: conditionals, loops, or exceptions.</li>\r\n<li>Filters: You can use filters within expressions to format data before displaying it.</li>\r\n</ul>\r\n<br />\r\n<br />\r\n<b>AngularJS Directives</b><br />\r\nAt a high level, directives are markers on a DOM element (such as an attribute, element name, comment or CSS class) that tell AngularJS's HTML compiler to attach a specified behavior to that DOM element or even transform the DOM element and its children.<br />\r\nAngular comes with a set of these directives built-in, like&nbsp;&nbsp;ng-app, ngBind, ngModel, and ngView. Much like you create controllers and services, you can create your own directives for Angular to use. When Angular bootstraps your application, the HTML compiler traverses the DOM matching directives against the DOM elements.<br />\r\n<br />\r\n<pre>&lt;body ng-app=\"sampleApp\" ng-controller=\"MainController\"&gt;</pre>\r\n<br />\r\n<br />\r\n<b>AngularJS Modules</b><br />\r\nYou can think of a module as a container for the different parts of your app – controllers, services, filters, directives, etc. Modules make your application more readable, and keep the global namespace clean. Most applications have a main method that instantiates and wires together the different parts of the application. Angular apps don't have a main method. Instead modules declaratively specify how an application should be bootstrapped. There are several advantages to this approach:<br />\r\nThe declarative process is easier to understand.<br />\r\nYou can package code as reusable modules.<br />\r\nThe modules can be loaded in any order (or even in parallel) because modules delay execution.<br />\r\nUnit tests only have to load relevant modules, which keeps them fast.<br />\r\nEnd-to-end tests can use modules to override configuration.<br />\r\n<br />\r\n<pre>var myAppModule = angular.module('sampleApp', []);</pre>\r\n<br />\r\n<br />\r\n<br />\r\n<b>AngularJS Controllers</b><br />\r\n<div style=\"text-align: justify;\">\r\nAngularJS controllers control the data of AngularJS applications. AngularJS controllers are regular JavaScript Objects. a Controller is a JavaScript constructor function that is used to augment the Angular Scope. When a Controller is attached to the DOM via the ng-controller directive, Angular will instantiate a new Controller object, using the specified Controller's constructor function. A new child scope will be available as an injectable parameter to the Controller's constructor function as $scope.</div>\r\n<div style=\"text-align: justify;\">\r\nUse controllers to:</div>\r\n<div style=\"text-align: justify;\">\r\nSet up the initial state of the $scope object.</div>\r\n<div style=\"text-align: justify;\">\r\nAdd behavior to the $scope object.</div>\r\n<div style=\"text-align: justify;\">\r\n<br /></div>\r\n<div style=\"text-align: justify;\">\r\n<pre>myAppModule.controller('MainController', ['$scope', '$http', function($scope, $http) {</pre>\r\n</div>\r\n<div style=\"text-align: justify;\">\r\n<br /></div>\r\n<div style=\"text-align: justify;\">\r\n}]); </div>\r\n<br />\r\n<br />\r\n<b>AngularJS Filters</b><br />\r\nA filter formats the value of an expression for display to the user. They can be used in view templates, controllers or services and it is easy to define your own filter.<br />\r\nThe underlying API is the filterProvider. Filters can be added to expressions and directives using a pipe character.<br />\r\nWe can develop our own filter called customized Filters.<br />\r\n<br />\r\n<br />\r\n<pre> Angular JS Filter - &nbsp;Date: {{ '2014-08-01' | date:'fullDate' }}</pre>\r\n<br />\r\n<br />\r\n// // Customised Filter used in the View.<br />\r\n<pre>myAppModule.filter('greet', function() {\r\n\r\n&nbsp;return function(name) {\r\n\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>// Put your logic Here<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>\r\n\r\n&nbsp; &nbsp; return 'Hello, ' + name + '!';\r\n\r\n&nbsp; };\r\n\r\n});</pre>\r\n<br />\r\n<br />\r\n<b><br /></b>\r\n<b>AngularJS Forms/Models</b><br />\r\nControls (input, select, textarea) are ways for a user to enter data. A Form is a collection of controls for the purpose of grouping related controls together.<br />\r\nForm and controls provide validation services, so that the user can be notified of invalid input. This provides a better user experience, because the user gets instant feedback on how to correct the error. Keep in mind that while client-side validation plays an important role in providing good user experience, it can easily be circumvented and thus can not be trusted. Server-side validation is still necessary for a secure application.<br />\r\n<br />\r\n<div>\r\n<pre>&lt;input type=\"text\" ng-model=\"search\" /&gt;</pre>\r\n<br />\r\n<br />\r\n<br />\r\n<br />\r\n<br />\r\n<div class=\"western\">\r\n<b>AngularJS HttpRequest&nbsp;</b><span style=\"text-align: justify;\"><b>$http</b>&nbsp;</span></div>\r\n<span style=\"text-align: justify;\">Service can be used for AJAX Request.</span><br />\r\n<span style=\"text-align: justify;\"></span><br />\r\n<pre><span style=\"text-align: justify;\">myAppModule.controller('MainController', ['$scope', '$http', function($scope, $http) {</span></pre>\r\n<br />\r\n<div style=\"text-align: justify;\">\r\n<br /></div>\r\n<div style=\"text-align: justify;\">\r\n}]);</div>\r\n</div>\r\n<br />\r\n<br />\r\n<br />\r\n<b>AngularJS Routing</b><br />\r\nThe <b>$route</b> service is usually used in conjunction with the <b>ngView</b> directive. The role of the ngView directive is to include the view template for the current route into the layout template. This makes it a perfect fit for our index.html template.<br />\r\n<b><br /></b>\r\nIn HTML page where routing is needed add this lines.<br />\r\n<br />\r\n&lt;li&gt;&lt;a href=\"#Routing1\" &gt; Routing URL1 &lt;/a&gt; &nbsp;&lt;/li&gt;<br />\r\n<br />\r\n&lt;li&gt;&lt;a href=\"#Routing2\"&gt; Routing URL2 &lt;/a&gt; &lt;/li&gt;<br />\r\n<b><br /></b>\r\n<b><br /></b>\r\nIn Controller.js<br />\r\n// Routing Controller from Route URL 1<br />\r\nmyAppModule.controller('Route1Controller', function($scope) {<br />\r\n&nbsp; &nbsp; $scope.routeMsg1 = 'You Clicked on Routing URL1 ';<br />\r\n});<br />\r\n<br />\r\n<br />\r\n// Routing Controller from Route URL 2<br />\r\nmyAppModule.controller('Route2Controller', function($scope) {<br />\r\n&nbsp; &nbsp; $scope.routeMsg2 = 'You Clicked on Routing URL2 ';<br />\r\n});<br />\r\n<br />\r\n<br />\r\n<br />\r\n// Routing for HREF<br />\r\nmyAppModule.config(['$routeProvider',<br />\r\n&nbsp; function($routeProvider) {<br />\r\n&nbsp; &nbsp; $routeProvider.<br />\r\n&nbsp; &nbsp; &nbsp; when('/Routing1', {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; templateUrl: 'route1.html',<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; controller: 'Route1Controller'<br />\r\n&nbsp; &nbsp; }).<br />\r\n&nbsp; &nbsp; &nbsp; when('/Routing2', {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; templateUrl: 'route2.html',<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; controller: 'Route2Controller'<br />\r\n&nbsp; &nbsp; &nbsp; }).<br />\r\n&nbsp; &nbsp; &nbsp; otherwise({<br />\r\n// &nbsp; &nbsp; &nbsp; &nbsp;redirectTo: '/routefree.html'<br />\r\n&nbsp; &nbsp; &nbsp; });<br />\r\n<br />\r\n}]);<br />\r\nWe need to make two HTML files (route1.html, route2.html) to render files html on the view<br />\r\n<b><br /></b>\r\n<b><br />Dependency Injection</b><br />\r\n<b><br /></b>\r\nDependency injection in AngularJS is responsible for creating components, dealing with how they get hold of their dependencies,&nbsp;<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span>and making them available to other components when requested.<br />\r\nIf you want to gain access to core AngularJS services, then you require adding a particular service as a parameter.<br />\r\nAngularJS will automatically notice that you want to use that service, and will make an instance available for you.<br />\r\n<b><br /></b>\r\n<b><br /></b>\r\n<b>Creating Dynamic Models in AngularJS</b><br />\r\nAdding a TextBox or Radio Button dynamically to the form.<br />\r\nHere we have to do little more to add the element dynamically. Here are the steps.<br />\r\n<br />\r\nPut this in Html File<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">   </span>&lt;div class=\"row\"&gt;<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">    </span>&lt;div class=\"form-group\" data-ng-repeat=\"textbox in textboxes\"&gt;<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">      </span><br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">     </span>&lt;input type=\"text\" ng-model=\"textbox.name\" name=\"\" placeholder=\"Enter Your Value Here\"&gt;<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">     </span>&lt;button ng-show=\"showAddTextBox(textbox)\" ng-click=\"addNewTextBox()\"&gt;Add Another extBox&lt;/button&gt;<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">    </span>&lt;/div&gt;<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">    </span><br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">  </span>&lt;/div&gt;<br />\r\n<br />\r\nIn Contrlller JS file<br />\r\n<br />\r\n<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">  </span>$scope.textboxes = [{id: 'Text1'}, {id: 'Text2'}, {id: 'Text3'}];<br />\r\n<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">  </span>$scope.addNewTextBox = function() {<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">   </span>var newItemNo = $scope.textboxes.length+1;<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">   </span>$scope.textboxes.push({'id':'Text' +newItemNo});<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">  </span>};<br />\r\n<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">  </span>$scope.showAddTextBox = function(textbox) {<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">  </span> &nbsp; return textbox.id === $scope.textboxes[$scope.textboxes.length-1].id;<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\">  </span>};<br />\r\n<span class=\"Apple-tab-span\" style=\"white-space: pre;\"> </span><br />\r\n<br />\r\n<br />\r\n<br />\r\n<br />\r\n<br />\r\n<b><br /></b>\r\n(still more to come)<br />\r\n<br />\r\n<br />\r\n<br />\r\n<b>AngularJS Sample Application</b><br />\r\nDownload Sample Application with reference to the doc.<br />\r\nThis will relate the tutorial with the code.<br />\r\n<a href=\"https://github.com/ajay-kr-shukla/angularjs-sample-app\">https://github.com/ajay-kr-shukla/angularjs-sample-app</a><br />\r\n<div>\r\nMy LinkedIn Page&nbsp;<a href=\"https://www.linkedin.com/pub/ajay-shukla/12/861/95\">https://www.linkedin.com/pub/ajay-shukla/12/861/95</a><br />\r\nContact me @&nbsp;mrajayshukla@gmail.com<br />\r\n<br /></div>\r\n</div>\r\n\r\n\r\n\r\n<script>\r\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\r\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\r\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\r\n  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\r\n\r\n  ga('create', 'UA-56065625-1', 'auto');\r\n  ga('send', 'pageview');\r\n\r\n</script>","google":"UA-56065625-1","note":"Don't delete this file! It's used internally to help with page regeneration."}